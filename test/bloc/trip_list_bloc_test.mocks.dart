// Mocks generated by Mockito 5.4.3 from annotations
// in tripplanner/test/bloc/trip_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tripplanner/bloc/trip_list/trip_list_service.dart' as _i3;
import 'package:tripplanner/models/trips.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseTrip_0 extends _i1.SmartFake implements _i2.DatabaseTrip {
  _FakeDatabaseTrip_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TripListService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripListService extends _i1.Mock implements _i3.TripListService {
  @override
  _i4.Future<List<_i2.DatabaseTrip>> getAllTrips() => (super.noSuchMethod(
        Invocation.method(
          #getAllTrips,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.DatabaseTrip>>.value(<_i2.DatabaseTrip>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.DatabaseTrip>>.value(<_i2.DatabaseTrip>[]),
      ) as _i4.Future<List<_i2.DatabaseTrip>>);

  @override
  _i4.Future<_i2.DatabaseTrip> addTrip() => (super.noSuchMethod(
        Invocation.method(
          #addTrip,
          [],
        ),
        returnValue: _i4.Future<_i2.DatabaseTrip>.value(_FakeDatabaseTrip_0(
          this,
          Invocation.method(
            #addTrip,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DatabaseTrip>.value(_FakeDatabaseTrip_0(
          this,
          Invocation.method(
            #addTrip,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DatabaseTrip>);

  @override
  _i4.Future<void> deleteTrip(_i2.DatabaseTrip? trip) => (super.noSuchMethod(
        Invocation.method(
          #deleteTrip,
          [trip],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

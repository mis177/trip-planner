// Mocks generated by Mockito 5.4.3 from annotations
// in tripplanner/test/bloc/trip_requirement_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tripplanner/bloc/trip_requirement/trip_requirements_service.dart'
    as _i2;
import 'package:tripplanner/models/trips.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TripRequirementService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripRequirementService extends _i1.Mock
    implements _i2.TripRequirementService {
  @override
  List<_i3.DatabaseRequirement> loadExistingRequirement(
          _i3.DatabaseTrip? existingTrip) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadExistingRequirement,
          [existingTrip],
        ),
        returnValue: <_i3.DatabaseRequirement>[],
        returnValueForMissingStub: <_i3.DatabaseRequirement>[],
      ) as List<_i3.DatabaseRequirement>);

  @override
  _i4.Future<void> addRequirement(_i3.DatabaseTrip? trip) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRequirement,
          [trip],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateRequirement({
    required _i3.DatabaseRequirement? requirement,
    required String? fieldName,
    required dynamic text,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRequirement,
          [],
          {
            #requirement: requirement,
            #fieldName: fieldName,
            #text: text,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteRequirement(_i3.DatabaseRequirement? requirement) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRequirement,
          [requirement],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAllRequirement(_i3.DatabaseTrip? existingTrip) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllRequirement,
          [existingTrip],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
